// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TypeNotification {
  LIKE_POST
  COMMENT_POST
}

model user {
  id                    Int              @id @default(autoincrement())
  name                  String           @db.VarChar(255)
  email                 String           @unique @db.VarChar(255)
  password              String           @db.VarChar(255)
  avatar                String?          @db.VarChar(255)
  bio                   String?          @db.Text
  created_at            DateTime         @default(now())
  updated_at            DateTime         @updatedAt
  email_verified_at     DateTime?
  user_role             user_role[]
  reset_password        reset_password[]
  post                  post[]
  post_like             post_like[]
  post_comment          post_comment[]
  notification_sent     notification[]   @relation("from_user")
  notification_received notification[]   @relation("to_user")
}

model role {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(255)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  user_role  user_role[]
}

model user_role {
  user_id    Int
  role_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role role @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([user_id, role_id])
}

model reset_password {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  token      Int      @unique
  expired_at DateTime

  user user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model post {
  id         Int      @id @default(autoincrement())
  user_id    Int
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user         user           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post_like    post_like[]
  post_comment post_comment[]
}

model post_like {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  post post @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model post_comment {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  comment    String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post post @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model notification {
  id                   Int              @id @default(autoincrement())
  from_user_id         Int
  to_user_id           Int
  type_notification_id Int
  message              String           @db.VarChar(255)
  is_read              Boolean
  type_notification    TypeNotification
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt

  from_user user @relation("from_user", fields: [from_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  to_user   user @relation("to_user", fields: [to_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
